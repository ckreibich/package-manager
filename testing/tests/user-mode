# Establish a skeletal Zeek installation layout and alternative home directory
# @TEST-EXEC: setup-zeek-and-home

# Pretending to be the Zeek-bundled zkg, install a package and show it
# @TEST-EXEC: zkg-zeek config >>output
# @TEST-EXEC: zkg-zeek install --force foo >>output
# @TEST-EXEC: zkg-zeek list >>output

# At this point, zkg should have crated manifest and package state in
# the Zeek install tree. The home directory should still be left
# alone.
# @TEST-EXEC: test -f zeekroot/var/lib/zkg/manifest.json
# @TEST-EXEC: test -f zeekroot/share/zeek/site/packages/foo/__load__.zeek
# @TEST-EXEC: test ! -d home/testuser/.zkg

# Now drop into shell to execute the following -- simplifies cleanup:
# @TEST-EXEC: bash -x %INPUT >>output

cleanup() {
    chmod -R ug+w zeekroot
}

trap cleanup EXIT

# Prevent writes to Zeek install:
chmod -R ugo-w zeekroot
echo $?
ls -la

env | sort

# A package list should now fail, since zkg wants to write a state update
zkg-zeek -vvv list 2>&1

[ $? -ne 0 ] && exit 0

exit 1
# Switching to user mode, install a different package.
# @TEST-EXEC: zkg-zeek --user --extra-source zeek=$(pwd)/sources/one install --force bar >>output
#
# Only that package should get listed, and zkg should have built up
# state in the home directory.
# @TEST-EXEC: zkg-zeek --user list >>output
# @TEST-EXEC: test -f home/testuser/.zkg/manifest.json
# @TEST-EXEC: test ! -f home/testuser/.zkg/script_dir/packages/foo/__load__.zeek
# @TEST-EXEC: test -f home/testuser/.zkg/script_dir/packages/bar/__load__.zeek

# So far this didn't need a config file, but we can produce one:
# @TEST-EXEC: test ! -f home/testuser/.zkg/config
# @TEST-EXEC: zkg-zeek --user autoconfig >>output
# @TEST-EXEC: test -f home/testuser/.zkg/config
# @TEST-EXEC: zkg-zeek --user config >>output

# @TEST-EXEC: TEST_DIFF_CANONIFIER=$SCRIPTS/diff-remove-cwd btest-diff output
